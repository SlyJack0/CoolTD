Function LoadTowerData(file$)	
	If FileExists(file$)
		f = OpenToRead(file$)
			//K‰yd‰‰n koko tiedosto l‰pi
			While Not EOF(f)
				//Luetaan 'komento'
				command$ = Lower(Trim(ReadLine(f)))
				
				//Jos oli oikea komento tornin luomiseen
				If command$ = "[tower]"
					nType.TOWERTYPE = New(TOWERTYPE)
					
					Repeat
						l$ = ReadLine(f)
						attr$ = Lower(Trim(GetWord(l$,1,"=")))
						value = Int(GetWord(l$,2,"="))
						
						Select attr$
							Case "name"
								nType\name = Trim(GetWord(l$,2,"="))
							Case "damage"
								nType\damage = value
							Case "range"
								nType\range = value
							Case "sspeed"
								nType\sSpeed = value
							Case "bspeed"
								nType\bSpeed = value
							Case "price"
								nType\price = value
							Case "clr"
								nType\clr = MakeMEMBlock(3)
								
								values$ = GetWord(l$,2,"=")
								
								PokeByte nType\clr,0,Int(GetWord(values$,1,","))
								PokeByte nType\clr,1,Int(GetWord(values$,2,","))
								PokeByte nType\clr,2,Int(GetWord(values$,3,","))
							Case "special"
								values$ = Lower(Trim(GetWord(l$,2,"=")))
								valueCount = CountWords(values$,",")
								
								nType\special = MakeMEMBlock(valueCount * 2)
								
								For i = 0 To valueCount - 1
									tmpV$ = GetWord(values$,i + 1,",")
									Select GetWord(tmpV$,1,":")
										Case "air"
											PokeByte nType\special,i * 2,SPECIAL_AIR
										Case "freeze"
											PokeByte nType\special,i * 2,SPECIAL_FREEZE
											PokeByte nType\special,i * 2 + 1,Int(GetWord(tmpV$,2,":"))
										Case "fire"
											PokeByte nType\special,i * 2,SPECIAL_FIRE
											PokeByte nType\special,i * 2 + 1,Int(GetWord(tmpV$,2,":"))
									EndSelect
								Next i
							Case "[upgrade]"
								If nType\upgrades = 0
									nType\upgrades = MakeMEMBlock(4)
								Else
									ResizeMEMBlock nType\upgrades,MEMBlockSize(nType\upgrades) + 4
								EndIf
								
								tmp = MakeMEMBlock(1)
								PokeByte tmp,0,UP_START

								Repeat
									l$ = ReadLine(f)
									attr$ = Lower(Trim(GetWord(l$,1,"=")))
									value = Int(GetWord(l$,2,"="))
									
									Select attr$
										Case "level"
											ResizeMEMBlock tmp,MEMBlockSize(tmp) + 5
											PokeByte tmp,MEMBlockSize(tmp) - 5,UP_LEVEL
											PokeInt tmp,MEMBlockSize(tmp) - 4,value
										Case "price"
											ResizeMEMBlock tmp,MEMBlockSize(tmp) + 5
											PokeByte tmp,MEMBlockSize(tmp) - 5,UP_PRICE
											PokeInt tmp,MEMBlockSize(tmp) - 4,value
										Case "damage"
											ResizeMEMBlock tmp,MEMBlockSize(tmp) + 5
											PokeByte tmp,MEMBlockSize(tmp) - 5,UP_DAMAGE
											PokeInt tmp,MEMBlockSize(tmp) - 4,value
										Case "range"
											ResizeMEMBlock tmp,MEMBlockSize(tmp) + 5
											PokeByte tmp,MEMBlockSize(tmp) - 5,UP_RANGE
											PokeInt tmp,MEMBlockSize(tmp) - 4,value
										Case "sspeed"
											ResizeMEMBlock tmp,MEMBlockSize(tmp) + 5
											PokeByte tmp,MEMBlockSize(tmp) - 5,UP_SSPEED
											PokeInt tmp,MEMBlockSize(tmp) - 4,value
										Case "bspeed"
											ResizeMEMBlock tmp,MEMBlockSize(tmp) + 5
											PokeByte tmp,MEMBlockSize(tmp) - 5,UP_BSPEED
											PokeInt tmp,MEMBlockSize(tmp) - 4,value
									EndSelect
								Until Lower(Trim(l$)) = "[/upgrade]"
								
								ResizeMEMBlock tmp,MEMBlockSize(tmp) + 1
								PokeByte tmp,MEMBlockSize(tmp) - 1,UP_END
								
								PokeInt nType\upgrades,MEMBlockSize(nType\upgrades) - 4,tmp
						EndSelect
					Until Lower(l$) = "[e"+"nd]"
					
					nType\id = ConvertToInteger(nType)
				EndIf
			Wend
		CloseFile f
	Else
		MakeError "File " + file$ + " n"+"ot found!"
		Return False
	EndIf
EndFunction

//Palauttaa tornityypin id:n nimen perusteella
Function GetTypeId(name$)
	For iType.TOWERTYPE = Each TOWERTYPE
		If iType\name = name
			Return iType\id
		EndIf
	Next iType
	Return False
EndFunction

//Luo uuden tornin
Function CreateTower(x,y,typeId)
	tType.TOWERTYPE = ConvertToType(typeId)
	
	If gMoney >= tType\price
		gMoney = gMoney - tType\price
		
		nTower.TOWER = New(TOWER)
			nTower\x = x
			nTower\y = y
			
			nTower\damage = tType\damage
			nTower\range = tType\range
			nTower\sSpeed = tType\sSpeed
			nTower\bSpeed = tType\bSpeed
			
			nTower\clr = tType\clr
			
			nTower\special = tType\special
			nTower\upgrades = tType\upgrades
			
			nTower\level = 1
			
			nTower\id = ConvertToInteger(nTower)
	EndIf
EndFunction

//Palauttaa tietyss‰ kohdassa olevan tornin id:n
Function GetTowerId(x,y)
	For iTower.TOWER = Each TOWER
		If iTower\x = x And iTower\y = y
			Return iTower\id
		EndIf
	Next iTower
	Return False
EndFunction

//P‰ivitt‰‰ tornien logiikan
Function UpdateTowers()
	For iTower.TOWER = Each TOWER
		//Onko ilmatorni
		tAir = IsAirTower(iTower\id)
		
		tmpX = iTower\x * GRID_SIZE + (GRID_SIZE - TOWER_SIZE) / 2
		tmpY = iTower\y * GRID_SIZE + (GRID_SIZE - TOWER_SIZE) / 2	
		
		If iTower\targetId = 0
			For iEnemy.ENEMY = Each ENEMY
				//Onko lent‰v‰ vihollinen
				eAir = IsAirEnemy(iEnemy\id)
				
				//Valitaan kohde vain jos vihollinen ja torni ovat samaa tyyppi‰
				If (tAir = True And eAir = True) Or (tAir = False And eAir = False)
					If Distance(tmpX,tmpY,iEnemy\x,iEnemy\y) <= iTower\range
						iTower\targetId = iEnemy\id
					EndIf
				EndIf
			Next iEnemy
		Else
			If IsAlive(iTower\targetId)
				tEnemy.ENEMY = ConvertToType(iTower\targetId)
			
				iTower\cannonAng = GetAngle(tmpX,tmpY,tEnemy\x,tEnemy\y)
				
				If Timer() > iTower\lastShot + iTower\sSpeed
					CreateBullet(tmpX + TOWER_SIZE / 2,tmpY + TOWER_SIZE / 2,iTower\cannonAng,iTower\bSpeed,iTower\damage,iTower\clr,iTower\special)
					
					iTower\lastShot = Timer()
				EndIf
				
				If Distance(tmpX,tmpY,tEnemy\x,tEnemy\y) > iTower\range
					iTower\targetId = 0
				EndIf
			Else
				iTower\targetId = 0
			EndIf
		EndIf
	Next iTower
EndFunction

//Piirt‰‰ kaikki tornit
Function DrawTowers()
	For iTower.TOWER = Each TOWER
		tmpX = iTower\x * GRID_SIZE + (GRID_SIZE - TOWER_SIZE) / 2
		tmpY = iTower\y * GRID_SIZE + (GRID_SIZE - TOWER_SIZE) / 2
		
		centerX = tmpX + TOWER_SIZE / 2
		centerY = tmpY + TOWER_SIZE / 2
		
		//Tornin kuva
		Color PeekByte(iTower\clr,0),PeekByte(iTower\clr,1),PeekByte(iTower\clr,2)
		Box tmpX,tmpY,TOWER_SIZE,TOWER_SIZE,0
		Box tmpX + 3,tmpY + 3,TOWER_SIZE - 6,TOWER_SIZE - 6,1
		
		//Levelilaatikot
		For i = 1 To iTower\level
			Box tmpX + (i - 1) * 3,tmpY - 3,2,2,1
		Next i
		
		//Piirret‰‰n kantama jos torni ON valittu
		If gSelectedTower = iTower\id
			Circle centerX - iTower\range,centerY - iTower\range,iTower\range * 2,0
			Text centerX + 50,centerY + 100,CountUpgrades(iTower\id)
		EndIf
	Next iTower
EndFunction

Function PrintTowerInfo()
	For iType.TOWERTYPE = Each TOWERTYPE
		Color PeekByte(iType\clr,0),PeekByte(iType\clr,1),PeekByte(iType\clr,2)
		Print "Name: " + iType\name
		Print "Price: " + iType\price
		Print "Damage: " + iType\damage
		Print "Range: " + iType\range
		Print "sSpeed: " + iType\sSpeed
		Print "bSpeed: " + iType\bSpeed
	Next iType
EndFunction

//Tarkistaa ampuuko torni ilmaan
Function IsAirTower(towerId)
	tTower.TOWER = ConvertToType(towerId)
	
	If tTower\special <> 0
		For i = 0 To MEMBlockSize(tTower\special) - 2 Step 2
			If PeekByte(tTower\special,i) = SPECIAL_AIR
				Return True
			EndIf
		Next i
	EndIf
	
	Return False
EndFunction

//Laskee p‰ivitysten m‰‰r‰n
Function CountUpgrades(towerId)
	tTower.TOWER = ConvertToType(towerId)
	
	If tTower\upgrades = 0
		Return 0
	Else
		Return MEMBlockSize(tTower\upgrades) / 4
	EndIf
EndFunction

//Palauttaa upgraden muistipalan
Function GetUpgradeMem(towerId,level)
	tTower.TOWER = ConvertToType(towerId)
	
	If CountUpgrades(towerId) > 0
		For i = 0 To MEMBlockSize(tTower\upgrades) - 4 Step 4
			tmpMem = PeekInt(tTower\upgrades,i)
			tmpAmount = (MEMBlockSize(tmpMem) - 2) / 5

			For k = 0 To tmpAmount - 1
				If PeekByte(tmpMem,1 + i * 5) = UP_LEVEL
					tmpLvl = PeekInt(tmpMem,2 + i * 5)

					If tmpLvl = level
						Return tmpMem
					EndIf
				EndIf
			Next k
		Next i
	EndIf
EndFunction
		
//Palauttaa p‰ivityksen hinnan
Function GetUpgradeProperty(towerId,level,prop)
	tTower.TOWER = ConvertToType(towerId)
	
	If CountUpgrades(towerId) > 0
		upMem = GetUpgradeMem(towerId,level)

		For i = 1 To MEMBlockSize(upMem) - 6 Step 5
			If PeekByte(upMem,i) = prop
				Return PeekInt(upMem,i + 1)
			EndIf
		Next i
	EndIf
EndFunction

//P‰ivitt‰‰ tornin
Function UpgradeTower(towerId,level)
	price = GetUpgradeProperty(towerId,level,UP_PRICE)
	If gMoney >= price
		gMoney = gMoney - price
		
		tTower.TOWER = ConvertToType(towerId)
		
		upgrade = GetUpgradeMem(towerId,level)
		tmpAmount = (MEMBlockSize(upgrade) - 2) / 5
		
		For i = 0 To tmpAmount - 1
			tmpProp = PeekByte(upgrade,1 + i * 5)
			tmpValue = PeekInt(upgrade,2 + i * 5)
			
			If tmpProp = UP_DAMAGE
				tTower\damage = tmpValue
			ElseIf tmpProp = UP_RANGE
				tTower\range = tmpValue
			ElseIf tmpProp = UP_SSPEED
				tTower\sSpeed = tmpValue
			ElseIf tmpProp = UP_BSPEED
				tTower\bSpeed = tmpValue
			EndIf
		Next i
	
		tTower\level = level
	endif
EndFunction