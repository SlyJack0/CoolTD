//Luo waypointin
Function AddWaypoint(x,y)
	ClearArray OFF
	
	gWaypointAmount = gWaypointAmount + 1
	ReDim gWaypoints(gWaypointAmount + 1,WP_PROPERTIES - 1)
	
	gWaypoints(gWaypointAmount,WP_X) = x
	gWaypoints(gWaypointAmount,WP_Y) = y
EndFunction

//Asettaa waypointille k‰‰ntymissuunnan
Function SetWaypointDir(waypoint)
	prevWaypoint = Max(1,waypoint - 1)
	nextWaypoint = Min(gWaypointAmount,waypoint + 1)
		
	currentX = gWaypoints(waypoint,WP_X)
	currentY = gWaypoints(waypoint,WP_Y)
		
	nextX = gWaypoints(nextWaypoint,WP_X)
	nextY = gWaypoints(nextWaypoint,WP_Y)
		
	prevX = gWaypoints(prevWaypoint,WP_X)
	prevY = gWaypoints(prevWaypoint,WP_Y)
	
	If waypoint = prevWaypoint
		If currentX < nextX
			gWaypoints(waypoint,WP_DIR) = DIR_RIGHT
		ElseIf currentX > nextX
			gWaypoints(waypoint,WP_DIR) = DIR_LEFT
		EndIf
		
		If currentY < nextY
			gWaypoints(waypoint,WP_DIR) = DIR_DOWN
		ElseIf currentY > nextY
			gWaypoints(waypoint,WP_DIR) = DIR_UP
		EndIf
	EndIf
	
	If currentX = prevX
		If currentX < nextX
			gWaypoints(waypoint,WP_DIR) = DIR_RIGHT
		ElseIf currentX > nextX
			gWaypoints(waypoint,WP_DIR) = DIR_LEFT
		EndIf
	ElseIf currentY = prevY
		If currentY < nextY
			gWaypoints(waypoint,WP_DIR) = DIR_DOWN
		ElseIf currentY > nextY
			gWaypoints(waypoint,WP_DIR) = DIR_UP
		EndIf
	EndIf
EndFunction

//Poistaa waypointin
Function DeleteWaypoint(waypoint)
	ClearArray OFF
	
	If waypoint = gWaypointAmount
		gWaypointAmount = gWaypointAmount - 1
		ReDim gWaypoints(gWaypointAmount + 1,WP_PROPERTIES - 1)
	EndIf
EndFunction

//Apufunktio kulmapalojen piirt‰miseen
Function DrawPathCorner(x,y,corner)
	Select corner
		Case 1 //Up-Left
			Circle x,y,CORNER_RADIUS,1
			Box x + CORNER_RADIUS / 2,y + CORNER_RADIUS / 2,GRID_SIZE - CORNER_RADIUS / 2,GRID_SIZE - CORNER_RADIUS / 2
			Box x + CORNER_RADIUS / 2,y,GRID_SIZE - CORNER_RADIUS / 2,CORNER_RADIUS / 2
			Box x,y + CORNER_RADIUS / 2,CORNER_RADIUS / 2,GRID_SIZE - CORNER_RADIUS / 2
		Case 2 //Up-Right
			Circle x + GRID_SIZE - CORNER_RADIUS,y,CORNER_RADIUS,1
			Box x,y + CORNER_RADIUS / 2,GRID_SIZE - CORNER_RADIUS / 2,GRID_SIZE - CORNER_RADIUS / 2
			Box x,y,GRID_SIZE - CORNER_RADIUS / 2,CORNER_RADIUS / 2
			Box x + GRID_SIZE - CORNER_RADIUS / 2,y + CORNER_RADIUS / 2,CORNER_RADIUS / 2,GRID_SIZE - CORNER_RADIUS / 2
		Case 3 //Down-Left
			Circle x,y + GRID_SIZE - CORNER_RADIUS,CORNER_RADIUS,1
			Box x + CORNER_RADIUS / 2,y,GRID_SIZE - CORNER_RADIUS / 2,GRID_SIZE - CORNER_RADIUS / 2
			Box x,y,CORNER_RADIUS / 2,GRID_SIZE - CORNER_RADIUS / 2
			Box x + CORNER_RADIUS / 2,y + GRID_SIZE - CORNER_RADIUS / 2,GRID_SIZE - CORNER_RADIUS / 2,CORNER_RADIUS / 2
		Case 4 //Down-Right
			Circle x + GRID_SIZE - CORNER_RADIUS,y + GRID_SIZE - CORNER_RADIUS,CORNER_RADIUS,1
			Box x,y,GRID_SIZE - CORNER_RADIUS / 2,GRID_SIZE - CORNER_RADIUS / 2
			Box x + GRID_SIZE - CORNER_RADIUS / 2,y,CORNER_RADIUS / 2,GRID_SIZE - CORNER_RADIUS / 2
			Box x,y + GRID_SIZE - CORNER_RADIUS / 2,GRID_SIZE - CORNER_RADIUS / 2,CORNER_RADIUS / 2
	EndSelect
EndFunction

//Piirt‰‰ reitin
Function DrawPath(img=0)
	If img = 1
		gPathImg = MakeImage(gScreenW,gScreenH)
		DrawToImage gPathImg
	EndIf
	
	For currentWaypoint = 1 To gWaypointAmount
		prevWaypoint = Max(1,currentWaypoint - 1)
		nextWaypoint = Min(gWaypointAmount,currentWaypoint + 1)
		
		currentX = gWaypoints(currentWaypoint,WP_X)
		currentY = gWaypoints(currentWaypoint,WP_Y)
		currentDirection = gWaypoints(currentWaypoint,WP_DIR)
		
		nextX = gWaypoints(nextWaypoint,WP_X)
		nextY = gWaypoints(nextWaypoint,WP_Y)
		
		prevX = gWaypoints(prevWaypoint,WP_X)
		prevY = gWaypoints(prevWaypoint,WP_Y)
		
		//Waypoint-kohtien piirt‰minen
		If currentWaypoint = 1	//Alku
			Color 64,80,64
			Box currentX * GRID_SIZE,currentY * GRID_SIZE,GRID_SIZE,GRID_SIZE
		ElseIf currentWaypoint = gWaypointAmount	//Loppu
			Color 128,64,64
			Box currentX * GRID_SIZE,currentY * GRID_SIZE,GRID_SIZE,GRID_SIZE
		Else
			Color cbDark
			//Valitaan oikeanlainen kulmapala
			If currentX = prevX
				If currentY < prevY
					If currentX < nextX
						tmpCorner = CORNER_UL
					ElseIf currentX > nextX
						tmpCorner = CORNER_UR
					EndIf
				ElseIf currentY > prevY
					If currentX < nextX
						tmpCorner = CORNER_DL
					ElseIf currentX > nextX
						tmpCorner = CORNER_DR
					EndIf
				EndIf
			ElseIf currentY = prevY
				If currentX < prevX
					If currentY < nextY
						tmpCorner = CORNER_UL
					ElseIf currentY > nextY
						tmpCorner = CORNER_DL
					EndIf
				ElseIf currentX > prevX
					If currentY < nextY
						tmpCorner = CORNER_UR
					ElseIf currentY > nextY
						tmpCorner = CORNER_DR
					EndIf
				EndIf
			EndIf
			
			DrawPathCorner(currentX * GRID_SIZE,currentY * GRID_SIZE,tmpCorner)
		EndIf
		
		Color cbDark
		//Piirret‰‰n reitti waypointtien v‰liin
		If currentDirection = DIR_UP
			startPoint = currentY - 1
			endPoint = nextY + 1
			
			For i = startPoint To endPoint Step -1
				Box currentX * GRID_SIZE,i * GRID_SIZE,GRID_SIZE,GRID_SIZE
			Next i
		ElseIf currentDirection = DIR_DOWN
			startPoint = currentY + 1
			endPoint = nextY - 1
			
			For i = startPoint To endPoint
				Box currentX * GRID_SIZE,i * GRID_SIZE,GRID_SIZE,GRID_SIZE
			Next i
		ElseIf currentDirection = DIR_LEFT
			startPoint = currentX - 1
			endPoint = nextX + 1
			
			For i = startPoint To endPoint Step -1
				Box i * GRID_SIZE,currentY * GRID_SIZE,GRID_SIZE,GRID_SIZE
			Next i
		ElseIf currentDirection = DIR_RIGHT
			startPoint = currentX + 1
			endPoint = nextX - 1
			
			For i = startPoint To endPoint
				Box i * GRID_SIZE,currentY * GRID_SIZE,GRID_SIZE,GRID_SIZE
			Next i
		EndIf
	Next currentWaypoint
	
	If img = 1
		DrawToScreen
	EndIf
EndFunction

//Tarkistaa onko tile tyhj‰
Function CheckTile(x,y)
	//Tarkistetaan onko kohdassa tornia
	If GetTowerId(x,y) <> 0
		Return False
	EndIf
	
	//Tarkistetaan onko kohdassa reitti‰
	For currentWaypoint = 1 To gWaypointAmount
		nextWaypoint = Min(gWaypointAmount,currentWaypoint + 1)
		
		currentX = gWaypoints(currentWaypoint,WP_X)
		currentY = gWaypoints(currentWaypoint,WP_Y)
		currentDirection = gWaypoints(currentWaypoint,WP_DIR)
		
		nextX = gWaypoints(nextWaypoint,WP_X)
		nextY = gWaypoints(nextWaypoint,WP_Y)
		
		If x = currentX And y = currentY
			Return False
		Else
			If currentDirection = DIR_UP
				startPoint = currentY - 1
				endPoint = nextY + 1
				
				For i = startPoint To endPoint Step -1
					If x = currentX And y = i
						Return False
					EndIf
				Next i
			ElseIf currentDirection = DIR_DOWN
				startPoint = currentY + 1
				endPoint = nextY - 1
				
				For i = startPoint To endPoint
					If x = currentX And y = i
						Return False
					EndIf
				Next i
			ElseIf currentDirection = DIR_LEFT
				startPoint = currentX - 1
				endPoint = nextX + 1
				
				For i = startPoint To endPoint Step -1
					If x = i And y = currentY
						Return False
					EndIf
				Next i
			ElseIf currentDirection = DIR_RIGHT
				startPoint = currentX + 1
				endPoint = nextX - 1
				
				For i = startPoint To endPoint
					If x = i And y = currentY
						Return False
					EndIf
				Next i
			EndIf
		EndIf
	Next currentWaypoint
	
	Return True
EndFunction
			
//Tyhjent‰‰ nykyisen reitin
Function ClearPath()
	ClearArray ON
	
	gWaypointAmount = 0
	ReDim gWaypoints(gWaypointAmount + 1,WP_PROPERTIES - 1)
	
	If gPathImg <> 0
		DeleteImage gPathImg
		gPathImg = 0
	endif
EndFunction

//Tallentaa reitin tiedostoon
Function SavePath()
	f = OpenToEdit("Data/levels.dat")
		If FileSize("Data/levels.dat") > 0
			tmpAmount = ReadInt(f)
			tmpAmount = tmpAmount + 1
		Else
			tmpAmount = 1
		EndIf
		
		//Kirjoitetaan uusi m‰‰r‰ tiedoston alkuun
		SeekFile f,0
		WriteInt f,tmpAmount
		
		//Uusi reitti tiedoston loppuun
		SeekFile f,FileSize("Data/levels.dat") + 4
		
		WriteByte f,PATH_START
		WriteByte f,gWaypointAmount
		
		For i = 1 To gWaypointAmount
			WriteByte f,gWaypoints(i,WP_X)
			WriteByte f,gWaypoints(i,WP_Y)
			WriteByte f,gWaypoints(i,WP_DIR)
		Next i
		
		WriteByte f,PATH_END
	CloseFile f
EndFunction

//Lataa reitin tiedostosta
Function LoadPath(number)
	ClearArray ON
	done = False
	tmpLvl = 0
	
	If FileExists("Data/levels.dat")
		f = OpenToEdit("Data/levels.dat")
			pathAmount = ReadInt(f)

			If number > pathAmount
				Return False
			EndIf
			
			While done = False
				tmpByte = ReadByte(f)
				
				If tmpByte = PATH_START
					tmpLvl = tmpLvl + 1
					
					If tmpLvl = number
						gWaypointAmount = ReadByte(f)
						
						ReDim gWaypoints(gWaypointAmount + 1,WP_PROPERTIES - 1)
						
						For i = 1 To gWaypointAmount
							gWaypoints(i,WP_X) = ReadByte(f)
							gWaypoints(i,WP_Y) = ReadByte(f)
							gWaypoints(i,WP_DIR) = ReadByte(f)
						Next i
						
						done = True
					Else
						amount = ReadByte(f)
						SeekFile f,FileOffset(f) + amount * 3 + 1
					EndIf
				EndIf
			Wend
		CloseFile f
		
		Return True
	Else
		Return False
	EndIf
EndFunction

//Palauttaa reittien m‰‰r‰n
Function GetPathAmount()
	If FileExists("Data/levels.dat")
		f = OpenToRead("Data/levels.dat")
			tmp = ReadInt(f)
		CloseFile f
		
		Return tmp
	Else
		Return 0
	EndIf
EndFunction

//Luo satunnaisen retitin
Function RandomPath(minDist=2,maxDist = 7,minAmount = 15)
	//Aloituskohta
	Repeat
		startX = Rand(0,GRID_W - 1)
		startY = Rand(0,GRID_H - 1)
		
		If startX = 0 Or startX = (GRID_W - 1)
			dir = DIR_UP
			Exit
		ElseIf startY = 0 Or startY = (GRID_H - 1)
			dir = DIR_LEFT
			Exit
		EndIf
	Forever
	
	AddWaypoint(startX,startY)
	
	While gWaypointAmount <= minAmount
		tmpX = gWaypoints(gWaypointAmount,WP_X)
		tmpY = gWaypoints(gWaypointAmount,WP_Y)
		
		minX = Max(0,tmpX - maxDist)
		maxX = Min(GRID_W - 1,tmpX + maxDist)
		minY = Max(0,tmpY - maxDist)
		maxY = Min(GRID_H - 1,tmpY + maxDist)
		
		If gWaypointAmount > 1
			dir = gWaypoints(gWaypointAmount - 1,WP_DIR)
		EndIf
		
		If dir = DIR_UP Or dir = DIR_DOWN
			nextX = Rand(minX,maxX)
			nextY = tmpY
		ElseIf dir = DIR_LEFT Or dir = DIR_RIGHT
			nextX = tmpX
			nextY = Rand(minY,maxY)
		EndIf
		
		If CheckTile(nextX,nextY) And (Abs(tmpX - nextX) >= minDist Or Abs(tmpY - nextY) >= minDist)
			AddWaypoint(nextX,nextY)
			SetWaypointDir(gWaypointAmount - 1)
		EndIf
	Wend
EndFunction
